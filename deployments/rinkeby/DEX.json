{
  "address": "0xD84619c692c32a026f6EC3B9b15f5b3b0c9bFf89",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOne",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenTwo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initAmountOne",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initAmountTwo",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolCreator",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOne",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTwo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOne",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTwo",
          "type": "uint256"
        }
      ],
      "name": "createNewPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2c5f3d919623a414ee99e2c40b0c07819e1490c296574bb4157e036d01803e54",
  "receipt": {
    "to": null,
    "from": "0x2A423ebE2579dD40b4EB840095F243C2CB9C93b2",
    "contractAddress": "0xD84619c692c32a026f6EC3B9b15f5b3b0c9bFf89",
    "transactionIndex": 4,
    "gasUsed": "4177962",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe7c4cac62e24679b75cde4201ecd4cccf61b4fe2c27b1cd405b34fd7c4cc0ac2",
    "transactionHash": "0x2c5f3d919623a414ee99e2c40b0c07819e1490c296574bb4157e036d01803e54",
    "logs": [],
    "blockNumber": 11306521,
    "cumulativeGasUsed": "5693109",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "b2d413094f487c4686103d01198731d4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOne\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTwo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initAmountOne\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initAmountTwo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTwo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTwo\",\"type\":\"uint256\"}],\"name\":\"createNewPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DEX.sol\":\"DEX\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/DEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Pool.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\n\\r\\ncontract DEX {\\r\\n    event PoolCreated(\\r\\n        address indexed poolAddress,\\r\\n        address indexed tokenOne,\\r\\n        address indexed tokenTwo,\\r\\n        uint256 initAmountOne,\\r\\n        uint256 initAmountTwo,\\r\\n        address poolCreator\\r\\n    );\\r\\n\\r\\n    function createNewPair(\\r\\n        address tokenOne,\\r\\n        address tokenTwo,\\r\\n        uint256 amountOne,\\r\\n        uint256 amountTwo\\r\\n    ) public {\\r\\n        Pool newPool = new Pool(\\r\\n            msg.sender,\\r\\n            tokenOne,\\r\\n            tokenTwo,\\r\\n            amountOne,\\r\\n            amountTwo\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            IERC20(tokenOne).transferFrom(\\r\\n                msg.sender,\\r\\n                address(newPool),\\r\\n                amountOne\\r\\n            )\\r\\n        );\\r\\n        require(\\r\\n            IERC20(tokenTwo).transferFrom(\\r\\n                msg.sender,\\r\\n                address(newPool),\\r\\n                amountTwo\\r\\n            )\\r\\n        );\\r\\n\\r\\n        emit PoolCreated(\\r\\n            address(newPool),\\r\\n            tokenOne,\\r\\n            tokenTwo,\\r\\n            amountOne,\\r\\n            amountTwo,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x93e3dd0e111cba7802a4baee35e8761b666d309e5ee21c0a3319191f092323e1\",\"license\":\"MIT\"},\"contracts/LiquidityToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\nerror LiquidityToken__NotOwner();\\r\\n\\r\\ncontract LiquidityToken is ERC20 {\\r\\n    address private immutable owner;\\r\\n\\r\\n    constructor() ERC20(\\\"LiquidityToken\\\", \\\"LT\\\") {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        if (msg.sender != owner) {\\r\\n            revert LiquidityToken__NotOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function mint(address receiver, uint256 amount) external onlyOwner {\\r\\n        _mint(receiver, amount);\\r\\n    }\\r\\n\\r\\n    function burn(address burner, uint256 amount) external onlyOwner {\\r\\n        _burn(burner, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x19cf6637bed2666534e329dcb744d0eb04d5163b4bb3cee916c03388150e84af\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./LiquidityToken.sol\\\";\\r\\n\\r\\nerror Pool__MustSendSomeTokens();\\r\\nerror Pool__NoLiquidityAvailable();\\r\\nerror Pool__NotEnoughTokensInPool(uint256 tokenBalance);\\r\\n\\r\\ncontract Pool is ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IERC20 private immutable tokenOne;\\r\\n    IERC20 private immutable tokenTwo;\\r\\n    LiquidityToken private immutable liqToken;\\r\\n\\r\\n    address private immutable poolCreator;\\r\\n    uint256 private constant FEE_PERCENTAGE = 3;\\r\\n\\r\\n    event LiquidityAdded(\\r\\n        address indexed liqProvider,\\r\\n        uint256 indexed amountOne,\\r\\n        uint256 indexed amountTwo,\\r\\n        uint256 liqTokenAmount\\r\\n    );\\r\\n    event LiquidityRemoved(\\r\\n        address indexed liqProvider,\\r\\n        uint256 indexed amountOne,\\r\\n        uint256 indexed amountTwo\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed buyer,\\r\\n        address indexed tokenIn,\\r\\n        address indexed tokenOut,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        address poolCreatorAddress,\\r\\n        address tokenOneAddress,\\r\\n        address tokenTwoAddress,\\r\\n        uint256 initAmountOne,\\r\\n        uint256 initAmountTwo\\r\\n    ) {\\r\\n        poolCreator = poolCreatorAddress;\\r\\n        tokenOne = IERC20(tokenOneAddress);\\r\\n        tokenTwo = IERC20(tokenTwoAddress);\\r\\n        liqToken = new LiquidityToken();\\r\\n\\r\\n        _initializePool(initAmountOne, initAmountTwo);\\r\\n    }\\r\\n\\r\\n    modifier onlyLps() {\\r\\n        if (liqToken.balanceOf(msg.sender) <= 0) {\\r\\n            revert Pool__NoLiquidityAvailable();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 amountOne, uint256 amountTwo)\\r\\n        public\\r\\n        nonReentrant\\r\\n    {\\r\\n        if (amountOne <= 0 || amountTwo <= 0) {\\r\\n            revert Pool__MustSendSomeTokens();\\r\\n        }\\r\\n\\r\\n        (uint256 adjAmountOne, uint256 adjAmountTwo) = checkLiquidityProportion(\\r\\n            amountOne,\\r\\n            amountTwo\\r\\n        );\\r\\n        uint256 liqTokenAmount = _calcLiquidityTokenAmount(\\r\\n            adjAmountOne,\\r\\n            adjAmountTwo\\r\\n        );\\r\\n\\r\\n        require(tokenOne.transferFrom(msg.sender, address(this), adjAmountOne));\\r\\n        require(tokenTwo.transferFrom(msg.sender, address(this), adjAmountTwo));\\r\\n        liqToken.mint(msg.sender, liqTokenAmount);\\r\\n\\r\\n        emit LiquidityAdded(\\r\\n            msg.sender,\\r\\n            adjAmountOne,\\r\\n            adjAmountTwo,\\r\\n            liqTokenAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function removeLiquidity() public onlyLps nonReentrant {\\r\\n        (uint256 amountOne, uint256 amountTwo) = _removeLiquidity();\\r\\n\\r\\n        require(tokenOne.transfer(msg.sender, amountOne));\\r\\n        require(tokenTwo.transfer(msg.sender, amountTwo));\\r\\n        liqToken.burn(msg.sender, liqToken.balanceOf(msg.sender));\\r\\n\\r\\n        emit LiquidityRemoved(msg.sender, amountOne, amountTwo);\\r\\n    }\\r\\n\\r\\n    function swapTokenOneForTwo(uint256 amountOne) public nonReentrant {\\r\\n        if (amountOne <= 0) {\\r\\n            revert Pool__MustSendSomeTokens();\\r\\n        }\\r\\n\\r\\n        uint256 amountTwo = getTokenTwoQuantity(amountOne);\\r\\n\\r\\n        require(tokenOne.transferFrom(msg.sender, address(this), amountOne));\\r\\n        require(tokenTwo.transfer(msg.sender, amountTwo));\\r\\n\\r\\n        emit Swap(\\r\\n            msg.sender,\\r\\n            address(tokenOne),\\r\\n            address(tokenTwo),\\r\\n            amountOne,\\r\\n            amountTwo\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapTokenTwoForOne(uint256 amountTwo) public nonReentrant {\\r\\n        if (amountTwo <= 0) {\\r\\n            revert Pool__MustSendSomeTokens();\\r\\n        }\\r\\n\\r\\n        uint256 amountOne = getTokenOneQuantity(amountTwo);\\r\\n\\r\\n        require(tokenTwo.transferFrom(msg.sender, address(this), amountTwo));\\r\\n        require(tokenOne.transfer(msg.sender, amountOne));\\r\\n\\r\\n        emit Swap(\\r\\n            msg.sender,\\r\\n            address(tokenTwo),\\r\\n            address(tokenOne),\\r\\n            amountTwo,\\r\\n            amountOne\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function checkLiquidityProportion(uint256 amountOne, uint256 amountTwo)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        uint256 correctProportion = (tokenOne.balanceOf(address(this))).div(\\r\\n            tokenTwo.balanceOf(address(this))\\r\\n        );\\r\\n        uint256 inputProportion = amountOne.div(amountTwo);\\r\\n\\r\\n        if (inputProportion == correctProportion) {\\r\\n            return (amountOne, amountTwo);\\r\\n        }\\r\\n        if (inputProportion > correctProportion) {\\r\\n            return (amountTwo.mul(correctProportion), amountTwo);\\r\\n        }\\r\\n        if (inputProportion < correctProportion) {\\r\\n            return (amountOne, amountOne.div(correctProportion));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTokenTwoQuantity(uint256 amount) public view returns (uint256) {\\r\\n        uint256 product = _getCurrentProduct();\\r\\n        uint256 amountBeforeFee = tokenTwo.balanceOf(address(this)).sub(\\r\\n            product.div((tokenOne.balanceOf(address(this))).add(amount))\\r\\n        );\\r\\n        uint256 fee = getFeeAmount(amountBeforeFee);\\r\\n\\r\\n        return amountBeforeFee.sub(fee);\\r\\n    }\\r\\n\\r\\n    function getTokenOneQuantity(uint256 amount) public view returns (uint256) {\\r\\n        uint256 product = _getCurrentProduct();\\r\\n        uint256 amountBeforeFee = tokenOne.balanceOf(address(this)).sub(\\r\\n            product.div((tokenTwo.balanceOf(address(this))).add(amount))\\r\\n        );\\r\\n        uint256 fee = getFeeAmount(amountBeforeFee);\\r\\n\\r\\n        return amountBeforeFee.sub(fee);\\r\\n    }\\r\\n\\r\\n    function getTokenOneAddress() public view returns (address) {\\r\\n        return address(tokenOne);\\r\\n    }\\r\\n\\r\\n    function getTokenTwoAddress() public view returns (address) {\\r\\n        return address(tokenTwo);\\r\\n    }\\r\\n\\r\\n    function getLiquidityTokenAddress() public view returns (address) {\\r\\n        return address(liqToken);\\r\\n    }\\r\\n\\r\\n    function getPoolCreator() public view returns (address) {\\r\\n        return poolCreator;\\r\\n    }\\r\\n\\r\\n    function getFeeAmount(uint256 amount) public pure returns (uint256) {\\r\\n        return (amount.mul(FEE_PERCENTAGE)).div(100);\\r\\n    }\\r\\n\\r\\n    function getFeePercentage() public pure returns (uint256) {\\r\\n        return FEE_PERCENTAGE;\\r\\n    }\\r\\n\\r\\n    function _initializePool(uint256 initAmountOne, uint256 initAmountTwo)\\r\\n        private\\r\\n    {\\r\\n        uint256 initialLiquidity = Math.sqrt(initAmountOne.mul(initAmountTwo));\\r\\n        liqToken.mint(poolCreator, initialLiquidity);\\r\\n    }\\r\\n\\r\\n    function _getCurrentProduct() private view returns (uint256) {\\r\\n        uint256 tokenOneBalance = tokenOne.balanceOf(address(this));\\r\\n        uint256 tokenTwoBalance = tokenTwo.balanceOf(address(this));\\r\\n        return tokenOneBalance.mul(tokenTwoBalance);\\r\\n    }\\r\\n\\r\\n    function _calcLiquidityTokenAmount(uint256 amountOne, uint256 amountTwo)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            (amountOne.mul(liqToken.totalSupply())).div(\\r\\n                amountOne.add(tokenOne.balanceOf(address(this)))\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _removeLiquidity() private view returns (uint256, uint256) {\\r\\n        uint256 amountOne = (\\r\\n            liqToken.balanceOf(msg.sender).mul(\\r\\n                tokenOne.balanceOf(address(this))\\r\\n            )\\r\\n        ).div(liqToken.totalSupply());\\r\\n\\r\\n        uint256 amountTwo = (\\r\\n            liqToken.balanceOf(msg.sender).mul(\\r\\n                tokenTwo.balanceOf(address(this))\\r\\n            )\\r\\n        ).div(liqToken.totalSupply());\\r\\n\\r\\n        return (amountOne, amountTwo);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6eac615dcdd26ddfdaa365af65971081d71a3ebd9671de7f4e96964993faf60e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614b28806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063962a39d01462000033575b600080fd5b6200005160048036038101906200004b919062000312565b62000053565b005b6000338585858560405162000068906200025f565b62000078959493929190620003a6565b604051809103906000f08015801562000095573d6000803e3d6000fd5b5090508473ffffffffffffffffffffffffffffffffffffffff166323b872dd3383866040518463ffffffff1660e01b8152600401620000d79392919062000403565b602060405180830381600087803b158015620000f257600080fd5b505af115801562000107573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012d91906200047d565b6200013757600080fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3383856040518463ffffffff1660e01b8152600401620001769392919062000403565b602060405180830381600087803b1580156200019157600080fd5b505af1158015620001a6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001cc91906200047d565b620001d657600080fd5b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8f94cce92f04cba5ffa514478b6969807d92ade596489cbb11e94033c25b47d48686336040516200025093929190620004af565b60405180910390a45050505050565b61460680620004ed83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200029f8262000272565b9050919050565b620002b18162000292565b8114620002bd57600080fd5b50565b600081359050620002d181620002a6565b92915050565b6000819050919050565b620002ec81620002d7565b8114620002f857600080fd5b50565b6000813590506200030c81620002e1565b92915050565b600080600080608085870312156200032f576200032e6200026d565b5b60006200033f87828801620002c0565b94505060206200035287828801620002c0565b93505060406200036587828801620002fb565b92505060606200037887828801620002fb565b91505092959194509250565b6200038f8162000292565b82525050565b620003a081620002d7565b82525050565b600060a082019050620003bd600083018862000384565b620003cc602083018762000384565b620003db604083018662000384565b620003ea606083018562000395565b620003f9608083018462000395565b9695505050505050565b60006060820190506200041a600083018662000384565b62000429602083018562000384565b62000438604083018462000395565b949350505050565b60008115159050919050565b620004578162000440565b81146200046357600080fd5b50565b60008151905062000477816200044c565b92915050565b6000602082840312156200049657620004956200026d565b5b6000620004a68482850162000466565b91505092915050565b6000606082019050620004c6600083018662000395565b620004d5602083018562000395565b620004e4604083018462000384565b94935050505056fe6101006040523480156200001257600080fd5b5060405162004606380380620046068339818101604052810190620000389190620004c2565b60016000819055508473ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050604051620000ea906200040f565b604051809103906000f08015801562000107573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250506200014d82826200015860201b60201c565b505050505062000658565b6000620001896200017883856200020560201b620015b01790919060201c565b6200021d60201b620015c61760201c565b905060c05173ffffffffffffffffffffffffffffffffffffffff166340c10f1960e051836040518363ffffffff1660e01b8152600401620001cc9291906200056c565b600060405180830381600087803b158015620001e757600080fd5b505af1158015620001fc573d6000803e3d6000fd5b50505050505050565b60008183620002159190620005c8565b905092915050565b600080821415620002325760009050620003ef565b60006001905060008390506000608082901c11156200025a57608081901c9050604082901b91505b6000604082901c11156200027757604081901c9050602082901b91505b6000602082901c11156200029457602081901c9050601082901b91505b6000601082901c1115620002b157601081901c9050600882901b91505b6000600882901c1115620002ce57600881901c9050600482901b91505b6000600482901c1115620002eb57600481901c9050600282901b91505b6000600282901c11156200030157600182901b91505b600182858162000316576200031562000629565b5b048301901c9150600182858162000332576200033162000629565b5b048301901c915060018285816200034e576200034d62000629565b5b048301901c915060018285816200036a576200036962000629565b5b048301901c9150600182858162000386576200038562000629565b5b048301901c91506001828581620003a257620003a162000629565b5b048301901c91506001828581620003be57620003bd62000629565b5b048301901c9150620003ea82838681620003dd57620003dc62000629565b5b04620003f460201b60201c565b925050505b919050565b600081831062000405578162000407565b825b905092915050565b611b0b8062002afb83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200044f8262000422565b9050919050565b620004618162000442565b81146200046d57600080fd5b50565b600081519050620004818162000456565b92915050565b6000819050919050565b6200049c8162000487565b8114620004a857600080fd5b50565b600081519050620004bc8162000491565b92915050565b600080600080600060a08688031215620004e157620004e06200041d565b5b6000620004f18882890162000470565b9550506020620005048882890162000470565b9450506040620005178882890162000470565b93505060606200052a88828901620004ab565b92505060806200053d88828901620004ab565b9150509295509295909350565b620005558162000442565b82525050565b620005668162000487565b82525050565b60006040820190506200058360008301856200054a565b6200059260208301846200055b565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620005d58262000487565b9150620005e28362000487565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200061e576200061d62000599565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60805160a05160c05160e051612389620007726000396000610a0c0152600081816102e6015281816105db01528181610884015281816108c1015281816111160152818161177e015281816118c80152818161199401528181611ade0152611e2b015260008181610296015281816104590152818161050f015281816107ce01528181610a4b01528181610c8901528181610e2e0152818161105e015281816112e1015281816113cc01528181611a350152611c610152600081816102be015281816103a1015281816105460152818161071801528181610b1101528181610d4101528181610df701528181610fa60152818161121b015281816114750152818161181f01528181611bb40152611d7001526123896000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636affe6d01161008c5780639704122c116100665780639704122c146101dc5780639cd441da1461020c578063b52055b614610228578063fc3cd36014610258576100cf565b80636affe6d01461017257806386bcb15a146101905780638d6ee58f146101c0576100cf565b806311efbf61146100d4578063370ce909146100f25780633dacf86d14610110578063506ee1001461012e578063584879501461014c57806367b9a28614610168575b600080fd5b6100dc610289565b6040516100e99190611f1e565b60405180910390f35b6100fa610292565b6040516101079190611f7a565b60405180910390f35b6101186102ba565b6040516101259190611f7a565b60405180910390f35b6101366102e2565b6040516101439190611f7a565b60405180910390f35b61016660048036038101906101619190611fc6565b61030a565b005b6101706105d7565b005b61017a610a08565b6040516101879190611f7a565b60405180910390f35b6101aa60048036038101906101a59190611fc6565b610a30565b6040516101b79190611f1e565b60405180910390f35b6101da60048036038101906101d59190611fc6565b610bf2565b005b6101f660048036038101906101f19190611fc6565b610ebf565b6040516102039190611f1e565b60405180910390f35b61022660048036038101906102219190611ff3565b610eef565b005b610242600480360381019061023d9190611fc6565b611200565b60405161024f9190611f1e565b60405180910390f35b610272600480360381019061026d9190611ff3565b6113c2565b604051610280929190612033565b60405180910390f35b60006003905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60026000541415610350576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610347906120b9565b60405180910390fd5b600260008190555060008111610392576040517f685838f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061039d82611200565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016103fc939291906120d9565b602060405180830381600087803b15801561041657600080fd5b505af115801561042a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044e9190612148565b61045757600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016104b2929190612175565b602060405180830381600087803b1580156104cc57600080fd5b505af11580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105049190612148565b61050d57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e4606285856040516105c3929190612033565b60405180910390a450600160008190555050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106329190611f7a565b60206040518083038186803b15801561064a57600080fd5b505afa15801561065e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068291906121b3565b116106b9576040517f3d2dccc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260005414156106ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f6906120b9565b60405180910390fd5b6002600081905550600080610712611774565b915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610771929190612175565b602060405180830381600087803b15801561078b57600080fd5b505af115801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c39190612148565b6107cc57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610827929190612175565b602060405180830381600087803b15801561084157600080fd5b505af1158015610855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108799190612148565b61088257600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639dc29fac337f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016109189190611f7a565b60206040518083038186803b15801561093057600080fd5b505afa158015610944573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096891906121b3565b6040518363ffffffff1660e01b8152600401610985929190612175565b600060405180830381600087803b15801561099f57600080fd5b505af11580156109b3573d6000803e3d6000fd5b5050505080823373ffffffffffffffffffffffffffffffffffffffff167f96cd817c6329656790ef8fba7675405193677d39619571282f5e21f3a98cd05960405160405180910390a450506001600081905550565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080610a3b611baf565b90506000610bc6610b0f610b00867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610aa29190611f7a565b60206040518083038186803b158015610aba57600080fd5b505afa158015610ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af291906121b3565b611d2490919063ffffffff16565b84611d3a90919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b689190611f7a565b60206040518083038186803b158015610b8057600080fd5b505afa158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb891906121b3565b611d5090919063ffffffff16565b90506000610bd382610ebf565b9050610be88183611d5090919063ffffffff16565b9350505050919050565b60026000541415610c38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2f906120b9565b60405180910390fd5b600260008190555060008111610c7a576040517f685838f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610c8582610a30565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610ce4939291906120d9565b602060405180830381600087803b158015610cfe57600080fd5b505af1158015610d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d369190612148565b610d3f57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610d9a929190612175565b602060405180830381600087803b158015610db457600080fd5b505af1158015610dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dec9190612148565b610df557600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628585604051610eab929190612033565b60405180910390a450600160008190555050565b6000610ee86064610eda6003856115b090919063ffffffff16565b611d3a90919063ffffffff16565b9050919050565b60026000541415610f35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2c906120b9565b60405180910390fd5b6002600081905550600082111580610f4e575060008111155b15610f85576040517f685838f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610f9284846113c2565b915091506000610fa28383611d66565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611001939291906120d9565b602060405180830381600087803b15801561101b57600080fd5b505af115801561102f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110539190612148565b61105c57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016110b9939291906120d9565b602060405180830381600087803b1580156110d357600080fd5b505af11580156110e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110b9190612148565b61111457600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b815260040161116f929190612175565b600060405180830381600087803b15801561118957600080fd5b505af115801561119d573d6000803e3d6000fd5b5050505081833373ffffffffffffffffffffffffffffffffffffffff167f64b83944e79c3ce8d4c297411de637c3e102d064677aac0c163976ebdcd6f50e846040516111e99190611f1e565b60405180910390a450505060016000819055505050565b60008061120b611baf565b905060006113966112df6112d0867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112729190611f7a565b60206040518083038186803b15801561128a57600080fd5b505afa15801561129e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c291906121b3565b611d2490919063ffffffff16565b84611d3a90919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113389190611f7a565b60206040518083038186803b15801561135057600080fd5b505afa158015611364573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138891906121b3565b611d5090919063ffffffff16565b905060006113a382610ebf565b90506113b88183611d5090919063ffffffff16565b9350505050919050565b600080600061152a7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114239190611f7a565b60206040518083038186803b15801561143b57600080fd5b505afa15801561144f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147391906121b3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114cc9190611f7a565b60206040518083038186803b1580156114e457600080fd5b505afa1580156114f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151c91906121b3565b611d3a90919063ffffffff16565b905060006115418587611d3a90919063ffffffff16565b9050818114156115585785859350935050506115a9565b8181111561157f5761157382866115b090919063ffffffff16565b859350935050506115a9565b818110156115a6578561159b8388611d3a90919063ffffffff16565b9350935050506115a9565b50505b9250929050565b600081836115be919061220f565b905092915050565b6000808214156115d9576000905061176f565b60006001905060008390506000608082901c111561160057608081901c9050604082901b91505b6000604082901c111561161c57604081901c9050602082901b91505b6000602082901c111561163857602081901c9050601082901b91505b6000601082901c111561165457601081901c9050600882901b91505b6000600882901c111561167057600881901c9050600482901b91505b6000600482901c111561168c57600481901c9050600282901b91505b6000600282901c11156116a157600182901b91505b60018285816116b3576116b2612269565b5b048301901c915060018285816116cc576116cb612269565b5b048301901c915060018285816116e5576116e4612269565b5b048301901c915060018285816116fe576116fd612269565b5b048301901c9150600182858161171757611716612269565b5b048301901c915060018285816117305761172f612269565b5b048301901c9150600182858161174957611748612269565b5b048301901c915061176a8283868161176457611763612269565b5b04611eec565b925050505b919050565b600080600061198b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e257600080fd5b505afa1580156117f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181a91906121b3565b61197d7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016118769190611f7a565b60206040518083038186803b15801561188e57600080fd5b505afa1580156118a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c691906121b3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161191f9190611f7a565b60206040518083038186803b15801561193757600080fd5b505afa15801561194b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196f91906121b3565b6115b090919063ffffffff16565b611d3a90919063ffffffff16565b90506000611ba17f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119f857600080fd5b505afa158015611a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3091906121b3565b611b937f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a8c9190611f7a565b60206040518083038186803b158015611aa457600080fd5b505afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc91906121b3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611b359190611f7a565b60206040518083038186803b158015611b4d57600080fd5b505afa158015611b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8591906121b3565b6115b090919063ffffffff16565b611d3a90919063ffffffff16565b905081819350935050509091565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611c0b9190611f7a565b60206040518083038186803b158015611c2357600080fd5b505afa158015611c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5b91906121b3565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611cb89190611f7a565b60206040518083038186803b158015611cd057600080fd5b505afa158015611ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0891906121b3565b9050611d1d81836115b090919063ffffffff16565b9250505090565b60008183611d329190612298565b905092915050565b60008183611d4891906122ee565b905092915050565b60008183611d5e919061231f565b905092915050565b6000611ee4611e267f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611dc79190611f7a565b60206040518083038186803b158015611ddf57600080fd5b505afa158015611df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1791906121b3565b85611d2490919063ffffffff16565b611ed67f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e8f57600080fd5b505afa158015611ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec791906121b3565b866115b090919063ffffffff16565b611d3a90919063ffffffff16565b905092915050565b6000818310611efb5781611efd565b825b905092915050565b6000819050919050565b611f1881611f05565b82525050565b6000602082019050611f336000830184611f0f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f6482611f39565b9050919050565b611f7481611f59565b82525050565b6000602082019050611f8f6000830184611f6b565b92915050565b600080fd5b611fa381611f05565b8114611fae57600080fd5b50565b600081359050611fc081611f9a565b92915050565b600060208284031215611fdc57611fdb611f95565b5b6000611fea84828501611fb1565b91505092915050565b6000806040838503121561200a57612009611f95565b5b600061201885828601611fb1565b925050602061202985828601611fb1565b9150509250929050565b60006040820190506120486000830185611f0f565b6120556020830184611f0f565b9392505050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006120a3601f8361205c565b91506120ae8261206d565b602082019050919050565b600060208201905081810360008301526120d281612096565b9050919050565b60006060820190506120ee6000830186611f6b565b6120fb6020830185611f6b565b6121086040830184611f0f565b949350505050565b60008115159050919050565b61212581612110565b811461213057600080fd5b50565b6000815190506121428161211c565b92915050565b60006020828403121561215e5761215d611f95565b5b600061216c84828501612133565b91505092915050565b600060408201905061218a6000830185611f6b565b6121976020830184611f0f565b9392505050565b6000815190506121ad81611f9a565b92915050565b6000602082840312156121c9576121c8611f95565b5b60006121d78482850161219e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061221a82611f05565b915061222583611f05565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561225e5761225d6121e0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006122a382611f05565b91506122ae83611f05565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156122e3576122e26121e0565b5b828201905092915050565b60006122f982611f05565b915061230483611f05565b92508261231457612313612269565b5b828204905092915050565b600061232a82611f05565b915061233583611f05565b925082821015612348576123476121e0565b5b82820390509291505056fea26469706673582212202880b2d13f9c80a9786c4b3d64223319172f462067d8e7f29260733038da3ee864736f6c6343000809003360a06040523480156200001157600080fd5b506040518060400160405280600e81526020017f4c6971756964697479546f6b656e0000000000000000000000000000000000008152506040518060400160405280600281526020017f4c54000000000000000000000000000000000000000000000000000000000000815250816003908051906020019062000096929190620000ec565b508060049080519060200190620000af929190620000ec565b5050503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505062000201565b828054620000fa90620001cb565b90600052602060002090601f0160209004810192826200011e57600085556200016a565b82601f106200013957805160ff19168380011785556200016a565b828001600101855582156200016a579182015b82811115620001695782518255916020019190600101906200014c565b5b5090506200017991906200017d565b5090565b5b80821115620001985760008160009055506001016200017e565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001e457607f821691505b60208210811415620001fb57620001fa6200019c565b5b50919050565b6080516118e76200022460003960008181610404015261057101526118e76000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610228578063a457c2d714610244578063a9059cbb14610274578063dd62ed3e146102a4576100cf565b806340c10f19146101be57806370a08231146101da57806395d89b411461020a576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce56714610170578063395093511461018e575b600080fd5b6100dc6102d4565b6040516100e99190610fdd565b60405180910390f35b61010c60048036038101906101079190611098565b610366565b60405161011991906110f3565b60405180910390f35b61012a610389565b604051610137919061111d565b60405180910390f35b61015a60048036038101906101559190611138565b610393565b60405161016791906110f3565b60405180910390f35b6101786103c2565b60405161018591906111a7565b60405180910390f35b6101a860048036038101906101a39190611098565b6103cb565b6040516101b591906110f3565b60405180910390f35b6101d860048036038101906101d39190611098565b610402565b005b6101f460048036038101906101ef91906111c2565b610495565b604051610201919061111d565b60405180910390f35b6102126104dd565b60405161021f9190610fdd565b60405180910390f35b610242600480360381019061023d9190611098565b61056f565b005b61025e60048036038101906102599190611098565b610602565b60405161026b91906110f3565b60405180910390f35b61028e60048036038101906102899190611098565b610679565b60405161029b91906110f3565b60405180910390f35b6102be60048036038101906102b991906111ef565b61069c565b6040516102cb919061111d565b60405180910390f35b6060600380546102e39061125e565b80601f016020809104026020016040519081016040528092919081815260200182805461030f9061125e565b801561035c5780601f106103315761010080835404028352916020019161035c565b820191906000526020600020905b81548152906001019060200180831161033f57829003601f168201915b5050505050905090565b600080610371610723565b905061037e81858561072b565b600191505092915050565b6000600254905090565b60008061039e610723565b90506103ab8582856108f6565b6103b6858585610982565b60019150509392505050565b60006012905090565b6000806103d6610723565b90506103f78185856103e8858961069c565b6103f291906112bf565b61072b565b600191505092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610487576040517fa022537b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104918282610c03565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546104ec9061125e565b80601f01602080910402602001604051908101604052809291908181526020018280546105189061125e565b80156105655780601f1061053a57610100808354040283529160200191610565565b820191906000526020600020905b81548152906001019060200180831161054857829003601f168201915b5050505050905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105f4576040517fa022537b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105fe8282610d63565b5050565b60008061060d610723565b9050600061061b828661069c565b905083811015610660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065790611387565b60405180910390fd5b61066d828686840361072b565b60019250505092915050565b600080610684610723565b9050610691818585610982565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561079b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079290611419565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561080b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610802906114ab565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108e9919061111d565b60405180910390a3505050565b6000610902848461069c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461097c578181101561096e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096590611517565b60405180910390fd5b61097b848484840361072b565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e9906115a9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a599061163b565b60405180910390fd5b610a6d838383610f3a565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aea906116cd565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b8691906112bf565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610bea919061111d565b60405180910390a3610bfd848484610f3f565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6a90611739565b60405180910390fd5b610c7f60008383610f3a565b8060026000828254610c9191906112bf565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ce691906112bf565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d4b919061111d565b60405180910390a3610d5f60008383610f3f565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610dd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dca906117cb565b60405180910390fd5b610ddf82600083610f3a565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5c9061185d565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254610ebc919061187d565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f21919061111d565b60405180910390a3610f3583600084610f3f565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f7e578082015181840152602081019050610f63565b83811115610f8d576000848401525b50505050565b6000601f19601f8301169050919050565b6000610faf82610f44565b610fb98185610f4f565b9350610fc9818560208601610f60565b610fd281610f93565b840191505092915050565b60006020820190508181036000830152610ff78184610fa4565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061102f82611004565b9050919050565b61103f81611024565b811461104a57600080fd5b50565b60008135905061105c81611036565b92915050565b6000819050919050565b61107581611062565b811461108057600080fd5b50565b6000813590506110928161106c565b92915050565b600080604083850312156110af576110ae610fff565b5b60006110bd8582860161104d565b92505060206110ce85828601611083565b9150509250929050565b60008115159050919050565b6110ed816110d8565b82525050565b600060208201905061110860008301846110e4565b92915050565b61111781611062565b82525050565b6000602082019050611132600083018461110e565b92915050565b60008060006060848603121561115157611150610fff565b5b600061115f8682870161104d565b93505060206111708682870161104d565b925050604061118186828701611083565b9150509250925092565b600060ff82169050919050565b6111a18161118b565b82525050565b60006020820190506111bc6000830184611198565b92915050565b6000602082840312156111d8576111d7610fff565b5b60006111e68482850161104d565b91505092915050565b6000806040838503121561120657611205610fff565b5b60006112148582860161104d565b92505060206112258582860161104d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061127657607f821691505b6020821081141561128a5761128961122f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112ca82611062565b91506112d583611062565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561130a57611309611290565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611371602583610f4f565b915061137c82611315565b604082019050919050565b600060208201905081810360008301526113a081611364565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611403602483610f4f565b915061140e826113a7565b604082019050919050565b60006020820190508181036000830152611432816113f6565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611495602283610f4f565b91506114a082611439565b604082019050919050565b600060208201905081810360008301526114c481611488565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611501601d83610f4f565b915061150c826114cb565b602082019050919050565b60006020820190508181036000830152611530816114f4565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611593602583610f4f565b915061159e82611537565b604082019050919050565b600060208201905081810360008301526115c281611586565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611625602383610f4f565b9150611630826115c9565b604082019050919050565b6000602082019050818103600083015261165481611618565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006116b7602683610f4f565b91506116c28261165b565b604082019050919050565b600060208201905081810360008301526116e6816116aa565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611723601f83610f4f565b915061172e826116ed565b602082019050919050565b6000602082019050818103600083015261175281611716565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006117b5602183610f4f565b91506117c082611759565b604082019050919050565b600060208201905081810360008301526117e4816117a8565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611847602283610f4f565b9150611852826117eb565b604082019050919050565b600060208201905081810360008301526118768161183a565b9050919050565b600061188882611062565b915061189383611062565b9250828210156118a6576118a5611290565b5b82820390509291505056fea2646970667358221220d72883269ea3e56c4e7a7c50a7018aa0f0beb86dd172f81f4a80e92d23fa712464736f6c63430008090033a264697066735822122009e954b20f091a65ea62f36c108d665149dea3011074eb55e847261744c6bbe864736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063962a39d01462000033575b600080fd5b6200005160048036038101906200004b919062000312565b62000053565b005b6000338585858560405162000068906200025f565b62000078959493929190620003a6565b604051809103906000f08015801562000095573d6000803e3d6000fd5b5090508473ffffffffffffffffffffffffffffffffffffffff166323b872dd3383866040518463ffffffff1660e01b8152600401620000d79392919062000403565b602060405180830381600087803b158015620000f257600080fd5b505af115801562000107573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012d91906200047d565b6200013757600080fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3383856040518463ffffffff1660e01b8152600401620001769392919062000403565b602060405180830381600087803b1580156200019157600080fd5b505af1158015620001a6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001cc91906200047d565b620001d657600080fd5b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8f94cce92f04cba5ffa514478b6969807d92ade596489cbb11e94033c25b47d48686336040516200025093929190620004af565b60405180910390a45050505050565b61460680620004ed83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200029f8262000272565b9050919050565b620002b18162000292565b8114620002bd57600080fd5b50565b600081359050620002d181620002a6565b92915050565b6000819050919050565b620002ec81620002d7565b8114620002f857600080fd5b50565b6000813590506200030c81620002e1565b92915050565b600080600080608085870312156200032f576200032e6200026d565b5b60006200033f87828801620002c0565b94505060206200035287828801620002c0565b93505060406200036587828801620002fb565b92505060606200037887828801620002fb565b91505092959194509250565b6200038f8162000292565b82525050565b620003a081620002d7565b82525050565b600060a082019050620003bd600083018862000384565b620003cc602083018762000384565b620003db604083018662000384565b620003ea606083018562000395565b620003f9608083018462000395565b9695505050505050565b60006060820190506200041a600083018662000384565b62000429602083018562000384565b62000438604083018462000395565b949350505050565b60008115159050919050565b620004578162000440565b81146200046357600080fd5b50565b60008151905062000477816200044c565b92915050565b6000602082840312156200049657620004956200026d565b5b6000620004a68482850162000466565b91505092915050565b6000606082019050620004c6600083018662000395565b620004d5602083018562000395565b620004e4604083018462000384565b94935050505056fe6101006040523480156200001257600080fd5b5060405162004606380380620046068339818101604052810190620000389190620004c2565b60016000819055508473ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050604051620000ea906200040f565b604051809103906000f08015801562000107573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250506200014d82826200015860201b60201c565b505050505062000658565b6000620001896200017883856200020560201b620015b01790919060201c565b6200021d60201b620015c61760201c565b905060c05173ffffffffffffffffffffffffffffffffffffffff166340c10f1960e051836040518363ffffffff1660e01b8152600401620001cc9291906200056c565b600060405180830381600087803b158015620001e757600080fd5b505af1158015620001fc573d6000803e3d6000fd5b50505050505050565b60008183620002159190620005c8565b905092915050565b600080821415620002325760009050620003ef565b60006001905060008390506000608082901c11156200025a57608081901c9050604082901b91505b6000604082901c11156200027757604081901c9050602082901b91505b6000602082901c11156200029457602081901c9050601082901b91505b6000601082901c1115620002b157601081901c9050600882901b91505b6000600882901c1115620002ce57600881901c9050600482901b91505b6000600482901c1115620002eb57600481901c9050600282901b91505b6000600282901c11156200030157600182901b91505b600182858162000316576200031562000629565b5b048301901c9150600182858162000332576200033162000629565b5b048301901c915060018285816200034e576200034d62000629565b5b048301901c915060018285816200036a576200036962000629565b5b048301901c9150600182858162000386576200038562000629565b5b048301901c91506001828581620003a257620003a162000629565b5b048301901c91506001828581620003be57620003bd62000629565b5b048301901c9150620003ea82838681620003dd57620003dc62000629565b5b04620003f460201b60201c565b925050505b919050565b600081831062000405578162000407565b825b905092915050565b611b0b8062002afb83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200044f8262000422565b9050919050565b620004618162000442565b81146200046d57600080fd5b50565b600081519050620004818162000456565b92915050565b6000819050919050565b6200049c8162000487565b8114620004a857600080fd5b50565b600081519050620004bc8162000491565b92915050565b600080600080600060a08688031215620004e157620004e06200041d565b5b6000620004f18882890162000470565b9550506020620005048882890162000470565b9450506040620005178882890162000470565b93505060606200052a88828901620004ab565b92505060806200053d88828901620004ab565b9150509295509295909350565b620005558162000442565b82525050565b620005668162000487565b82525050565b60006040820190506200058360008301856200054a565b6200059260208301846200055b565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620005d58262000487565b9150620005e28362000487565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200061e576200061d62000599565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60805160a05160c05160e051612389620007726000396000610a0c0152600081816102e6015281816105db01528181610884015281816108c1015281816111160152818161177e015281816118c80152818161199401528181611ade0152611e2b015260008181610296015281816104590152818161050f015281816107ce01528181610a4b01528181610c8901528181610e2e0152818161105e015281816112e1015281816113cc01528181611a350152611c610152600081816102be015281816103a1015281816105460152818161071801528181610b1101528181610d4101528181610df701528181610fa60152818161121b015281816114750152818161181f01528181611bb40152611d7001526123896000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636affe6d01161008c5780639704122c116100665780639704122c146101dc5780639cd441da1461020c578063b52055b614610228578063fc3cd36014610258576100cf565b80636affe6d01461017257806386bcb15a146101905780638d6ee58f146101c0576100cf565b806311efbf61146100d4578063370ce909146100f25780633dacf86d14610110578063506ee1001461012e578063584879501461014c57806367b9a28614610168575b600080fd5b6100dc610289565b6040516100e99190611f1e565b60405180910390f35b6100fa610292565b6040516101079190611f7a565b60405180910390f35b6101186102ba565b6040516101259190611f7a565b60405180910390f35b6101366102e2565b6040516101439190611f7a565b60405180910390f35b61016660048036038101906101619190611fc6565b61030a565b005b6101706105d7565b005b61017a610a08565b6040516101879190611f7a565b60405180910390f35b6101aa60048036038101906101a59190611fc6565b610a30565b6040516101b79190611f1e565b60405180910390f35b6101da60048036038101906101d59190611fc6565b610bf2565b005b6101f660048036038101906101f19190611fc6565b610ebf565b6040516102039190611f1e565b60405180910390f35b61022660048036038101906102219190611ff3565b610eef565b005b610242600480360381019061023d9190611fc6565b611200565b60405161024f9190611f1e565b60405180910390f35b610272600480360381019061026d9190611ff3565b6113c2565b604051610280929190612033565b60405180910390f35b60006003905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60026000541415610350576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610347906120b9565b60405180910390fd5b600260008190555060008111610392576040517f685838f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061039d82611200565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016103fc939291906120d9565b602060405180830381600087803b15801561041657600080fd5b505af115801561042a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044e9190612148565b61045757600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016104b2929190612175565b602060405180830381600087803b1580156104cc57600080fd5b505af11580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105049190612148565b61050d57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e4606285856040516105c3929190612033565b60405180910390a450600160008190555050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106329190611f7a565b60206040518083038186803b15801561064a57600080fd5b505afa15801561065e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068291906121b3565b116106b9576040517f3d2dccc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260005414156106ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f6906120b9565b60405180910390fd5b6002600081905550600080610712611774565b915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610771929190612175565b602060405180830381600087803b15801561078b57600080fd5b505af115801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c39190612148565b6107cc57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610827929190612175565b602060405180830381600087803b15801561084157600080fd5b505af1158015610855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108799190612148565b61088257600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639dc29fac337f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016109189190611f7a565b60206040518083038186803b15801561093057600080fd5b505afa158015610944573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096891906121b3565b6040518363ffffffff1660e01b8152600401610985929190612175565b600060405180830381600087803b15801561099f57600080fd5b505af11580156109b3573d6000803e3d6000fd5b5050505080823373ffffffffffffffffffffffffffffffffffffffff167f96cd817c6329656790ef8fba7675405193677d39619571282f5e21f3a98cd05960405160405180910390a450506001600081905550565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080610a3b611baf565b90506000610bc6610b0f610b00867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610aa29190611f7a565b60206040518083038186803b158015610aba57600080fd5b505afa158015610ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af291906121b3565b611d2490919063ffffffff16565b84611d3a90919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b689190611f7a565b60206040518083038186803b158015610b8057600080fd5b505afa158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb891906121b3565b611d5090919063ffffffff16565b90506000610bd382610ebf565b9050610be88183611d5090919063ffffffff16565b9350505050919050565b60026000541415610c38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2f906120b9565b60405180910390fd5b600260008190555060008111610c7a576040517f685838f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610c8582610a30565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610ce4939291906120d9565b602060405180830381600087803b158015610cfe57600080fd5b505af1158015610d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d369190612148565b610d3f57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610d9a929190612175565b602060405180830381600087803b158015610db457600080fd5b505af1158015610dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dec9190612148565b610df557600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628585604051610eab929190612033565b60405180910390a450600160008190555050565b6000610ee86064610eda6003856115b090919063ffffffff16565b611d3a90919063ffffffff16565b9050919050565b60026000541415610f35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2c906120b9565b60405180910390fd5b6002600081905550600082111580610f4e575060008111155b15610f85576040517f685838f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610f9284846113c2565b915091506000610fa28383611d66565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611001939291906120d9565b602060405180830381600087803b15801561101b57600080fd5b505af115801561102f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110539190612148565b61105c57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016110b9939291906120d9565b602060405180830381600087803b1580156110d357600080fd5b505af11580156110e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110b9190612148565b61111457600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b815260040161116f929190612175565b600060405180830381600087803b15801561118957600080fd5b505af115801561119d573d6000803e3d6000fd5b5050505081833373ffffffffffffffffffffffffffffffffffffffff167f64b83944e79c3ce8d4c297411de637c3e102d064677aac0c163976ebdcd6f50e846040516111e99190611f1e565b60405180910390a450505060016000819055505050565b60008061120b611baf565b905060006113966112df6112d0867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112729190611f7a565b60206040518083038186803b15801561128a57600080fd5b505afa15801561129e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c291906121b3565b611d2490919063ffffffff16565b84611d3a90919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113389190611f7a565b60206040518083038186803b15801561135057600080fd5b505afa158015611364573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138891906121b3565b611d5090919063ffffffff16565b905060006113a382610ebf565b90506113b88183611d5090919063ffffffff16565b9350505050919050565b600080600061152a7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114239190611f7a565b60206040518083038186803b15801561143b57600080fd5b505afa15801561144f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147391906121b3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114cc9190611f7a565b60206040518083038186803b1580156114e457600080fd5b505afa1580156114f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151c91906121b3565b611d3a90919063ffffffff16565b905060006115418587611d3a90919063ffffffff16565b9050818114156115585785859350935050506115a9565b8181111561157f5761157382866115b090919063ffffffff16565b859350935050506115a9565b818110156115a6578561159b8388611d3a90919063ffffffff16565b9350935050506115a9565b50505b9250929050565b600081836115be919061220f565b905092915050565b6000808214156115d9576000905061176f565b60006001905060008390506000608082901c111561160057608081901c9050604082901b91505b6000604082901c111561161c57604081901c9050602082901b91505b6000602082901c111561163857602081901c9050601082901b91505b6000601082901c111561165457601081901c9050600882901b91505b6000600882901c111561167057600881901c9050600482901b91505b6000600482901c111561168c57600481901c9050600282901b91505b6000600282901c11156116a157600182901b91505b60018285816116b3576116b2612269565b5b048301901c915060018285816116cc576116cb612269565b5b048301901c915060018285816116e5576116e4612269565b5b048301901c915060018285816116fe576116fd612269565b5b048301901c9150600182858161171757611716612269565b5b048301901c915060018285816117305761172f612269565b5b048301901c9150600182858161174957611748612269565b5b048301901c915061176a8283868161176457611763612269565b5b04611eec565b925050505b919050565b600080600061198b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e257600080fd5b505afa1580156117f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181a91906121b3565b61197d7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016118769190611f7a565b60206040518083038186803b15801561188e57600080fd5b505afa1580156118a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c691906121b3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161191f9190611f7a565b60206040518083038186803b15801561193757600080fd5b505afa15801561194b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196f91906121b3565b6115b090919063ffffffff16565b611d3a90919063ffffffff16565b90506000611ba17f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119f857600080fd5b505afa158015611a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3091906121b3565b611b937f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a8c9190611f7a565b60206040518083038186803b158015611aa457600080fd5b505afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc91906121b3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611b359190611f7a565b60206040518083038186803b158015611b4d57600080fd5b505afa158015611b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8591906121b3565b6115b090919063ffffffff16565b611d3a90919063ffffffff16565b905081819350935050509091565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611c0b9190611f7a565b60206040518083038186803b158015611c2357600080fd5b505afa158015611c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5b91906121b3565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611cb89190611f7a565b60206040518083038186803b158015611cd057600080fd5b505afa158015611ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0891906121b3565b9050611d1d81836115b090919063ffffffff16565b9250505090565b60008183611d329190612298565b905092915050565b60008183611d4891906122ee565b905092915050565b60008183611d5e919061231f565b905092915050565b6000611ee4611e267f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611dc79190611f7a565b60206040518083038186803b158015611ddf57600080fd5b505afa158015611df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1791906121b3565b85611d2490919063ffffffff16565b611ed67f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e8f57600080fd5b505afa158015611ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec791906121b3565b866115b090919063ffffffff16565b611d3a90919063ffffffff16565b905092915050565b6000818310611efb5781611efd565b825b905092915050565b6000819050919050565b611f1881611f05565b82525050565b6000602082019050611f336000830184611f0f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f6482611f39565b9050919050565b611f7481611f59565b82525050565b6000602082019050611f8f6000830184611f6b565b92915050565b600080fd5b611fa381611f05565b8114611fae57600080fd5b50565b600081359050611fc081611f9a565b92915050565b600060208284031215611fdc57611fdb611f95565b5b6000611fea84828501611fb1565b91505092915050565b6000806040838503121561200a57612009611f95565b5b600061201885828601611fb1565b925050602061202985828601611fb1565b9150509250929050565b60006040820190506120486000830185611f0f565b6120556020830184611f0f565b9392505050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006120a3601f8361205c565b91506120ae8261206d565b602082019050919050565b600060208201905081810360008301526120d281612096565b9050919050565b60006060820190506120ee6000830186611f6b565b6120fb6020830185611f6b565b6121086040830184611f0f565b949350505050565b60008115159050919050565b61212581612110565b811461213057600080fd5b50565b6000815190506121428161211c565b92915050565b60006020828403121561215e5761215d611f95565b5b600061216c84828501612133565b91505092915050565b600060408201905061218a6000830185611f6b565b6121976020830184611f0f565b9392505050565b6000815190506121ad81611f9a565b92915050565b6000602082840312156121c9576121c8611f95565b5b60006121d78482850161219e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061221a82611f05565b915061222583611f05565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561225e5761225d6121e0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006122a382611f05565b91506122ae83611f05565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156122e3576122e26121e0565b5b828201905092915050565b60006122f982611f05565b915061230483611f05565b92508261231457612313612269565b5b828204905092915050565b600061232a82611f05565b915061233583611f05565b925082821015612348576123476121e0565b5b82820390509291505056fea26469706673582212202880b2d13f9c80a9786c4b3d64223319172f462067d8e7f29260733038da3ee864736f6c6343000809003360a06040523480156200001157600080fd5b506040518060400160405280600e81526020017f4c6971756964697479546f6b656e0000000000000000000000000000000000008152506040518060400160405280600281526020017f4c54000000000000000000000000000000000000000000000000000000000000815250816003908051906020019062000096929190620000ec565b508060049080519060200190620000af929190620000ec565b5050503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505062000201565b828054620000fa90620001cb565b90600052602060002090601f0160209004810192826200011e57600085556200016a565b82601f106200013957805160ff19168380011785556200016a565b828001600101855582156200016a579182015b82811115620001695782518255916020019190600101906200014c565b5b5090506200017991906200017d565b5090565b5b80821115620001985760008160009055506001016200017e565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001e457607f821691505b60208210811415620001fb57620001fa6200019c565b5b50919050565b6080516118e76200022460003960008181610404015261057101526118e76000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610228578063a457c2d714610244578063a9059cbb14610274578063dd62ed3e146102a4576100cf565b806340c10f19146101be57806370a08231146101da57806395d89b411461020a576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce56714610170578063395093511461018e575b600080fd5b6100dc6102d4565b6040516100e99190610fdd565b60405180910390f35b61010c60048036038101906101079190611098565b610366565b60405161011991906110f3565b60405180910390f35b61012a610389565b604051610137919061111d565b60405180910390f35b61015a60048036038101906101559190611138565b610393565b60405161016791906110f3565b60405180910390f35b6101786103c2565b60405161018591906111a7565b60405180910390f35b6101a860048036038101906101a39190611098565b6103cb565b6040516101b591906110f3565b60405180910390f35b6101d860048036038101906101d39190611098565b610402565b005b6101f460048036038101906101ef91906111c2565b610495565b604051610201919061111d565b60405180910390f35b6102126104dd565b60405161021f9190610fdd565b60405180910390f35b610242600480360381019061023d9190611098565b61056f565b005b61025e60048036038101906102599190611098565b610602565b60405161026b91906110f3565b60405180910390f35b61028e60048036038101906102899190611098565b610679565b60405161029b91906110f3565b60405180910390f35b6102be60048036038101906102b991906111ef565b61069c565b6040516102cb919061111d565b60405180910390f35b6060600380546102e39061125e565b80601f016020809104026020016040519081016040528092919081815260200182805461030f9061125e565b801561035c5780601f106103315761010080835404028352916020019161035c565b820191906000526020600020905b81548152906001019060200180831161033f57829003601f168201915b5050505050905090565b600080610371610723565b905061037e81858561072b565b600191505092915050565b6000600254905090565b60008061039e610723565b90506103ab8582856108f6565b6103b6858585610982565b60019150509392505050565b60006012905090565b6000806103d6610723565b90506103f78185856103e8858961069c565b6103f291906112bf565b61072b565b600191505092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610487576040517fa022537b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104918282610c03565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546104ec9061125e565b80601f01602080910402602001604051908101604052809291908181526020018280546105189061125e565b80156105655780601f1061053a57610100808354040283529160200191610565565b820191906000526020600020905b81548152906001019060200180831161054857829003601f168201915b5050505050905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105f4576040517fa022537b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105fe8282610d63565b5050565b60008061060d610723565b9050600061061b828661069c565b905083811015610660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065790611387565b60405180910390fd5b61066d828686840361072b565b60019250505092915050565b600080610684610723565b9050610691818585610982565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561079b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079290611419565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561080b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610802906114ab565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108e9919061111d565b60405180910390a3505050565b6000610902848461069c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461097c578181101561096e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096590611517565b60405180910390fd5b61097b848484840361072b565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e9906115a9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a599061163b565b60405180910390fd5b610a6d838383610f3a565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aea906116cd565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b8691906112bf565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610bea919061111d565b60405180910390a3610bfd848484610f3f565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6a90611739565b60405180910390fd5b610c7f60008383610f3a565b8060026000828254610c9191906112bf565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ce691906112bf565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d4b919061111d565b60405180910390a3610d5f60008383610f3f565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610dd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dca906117cb565b60405180910390fd5b610ddf82600083610f3a565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5c9061185d565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254610ebc919061187d565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f21919061111d565b60405180910390a3610f3583600084610f3f565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f7e578082015181840152602081019050610f63565b83811115610f8d576000848401525b50505050565b6000601f19601f8301169050919050565b6000610faf82610f44565b610fb98185610f4f565b9350610fc9818560208601610f60565b610fd281610f93565b840191505092915050565b60006020820190508181036000830152610ff78184610fa4565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061102f82611004565b9050919050565b61103f81611024565b811461104a57600080fd5b50565b60008135905061105c81611036565b92915050565b6000819050919050565b61107581611062565b811461108057600080fd5b50565b6000813590506110928161106c565b92915050565b600080604083850312156110af576110ae610fff565b5b60006110bd8582860161104d565b92505060206110ce85828601611083565b9150509250929050565b60008115159050919050565b6110ed816110d8565b82525050565b600060208201905061110860008301846110e4565b92915050565b61111781611062565b82525050565b6000602082019050611132600083018461110e565b92915050565b60008060006060848603121561115157611150610fff565b5b600061115f8682870161104d565b93505060206111708682870161104d565b925050604061118186828701611083565b9150509250925092565b600060ff82169050919050565b6111a18161118b565b82525050565b60006020820190506111bc6000830184611198565b92915050565b6000602082840312156111d8576111d7610fff565b5b60006111e68482850161104d565b91505092915050565b6000806040838503121561120657611205610fff565b5b60006112148582860161104d565b92505060206112258582860161104d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061127657607f821691505b6020821081141561128a5761128961122f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112ca82611062565b91506112d583611062565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561130a57611309611290565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611371602583610f4f565b915061137c82611315565b604082019050919050565b600060208201905081810360008301526113a081611364565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611403602483610f4f565b915061140e826113a7565b604082019050919050565b60006020820190508181036000830152611432816113f6565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611495602283610f4f565b91506114a082611439565b604082019050919050565b600060208201905081810360008301526114c481611488565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611501601d83610f4f565b915061150c826114cb565b602082019050919050565b60006020820190508181036000830152611530816114f4565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611593602583610f4f565b915061159e82611537565b604082019050919050565b600060208201905081810360008301526115c281611586565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611625602383610f4f565b9150611630826115c9565b604082019050919050565b6000602082019050818103600083015261165481611618565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006116b7602683610f4f565b91506116c28261165b565b604082019050919050565b600060208201905081810360008301526116e6816116aa565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611723601f83610f4f565b915061172e826116ed565b602082019050919050565b6000602082019050818103600083015261175281611716565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006117b5602183610f4f565b91506117c082611759565b604082019050919050565b600060208201905081810360008301526117e4816117a8565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611847602283610f4f565b9150611852826117eb565b604082019050919050565b600060208201905081810360008301526118768161183a565b9050919050565b600061188882611062565b915061189383611062565b9250828210156118a6576118a5611290565b5b82820390509291505056fea2646970667358221220d72883269ea3e56c4e7a7c50a7018aa0f0beb86dd172f81f4a80e92d23fa712464736f6c63430008090033a264697066735822122009e954b20f091a65ea62f36c108d665149dea3011074eb55e847261744c6bbe864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}